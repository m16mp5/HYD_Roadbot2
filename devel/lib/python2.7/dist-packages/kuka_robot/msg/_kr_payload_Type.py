# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuka_robot/kr_payload_Type.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kuka_robot.msg

class kr_payload_Type(genpy.Message):
  _md5sum = "acc9595ae3c243c8e07bdd4ea0d971e4"
  _type = "kuka_robot/kr_payload_Type"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Mass [kg]
float64 mass

# Center of mass [mm]
kuka_robot/kr_pose_Type CenterOfGravity

# Inertia [kg-m^2]
kuka_robot/kr_pose_Type Inertia


================================================================================
MSG: kuka_robot/kr_pose_Type
# XYZ coordinate [mm]
float64 X
float64 Y
float64 Z
# ABC orientation [mm]
float64 A
float64 B
float64 C
# Status and Turn [unit]
float64 S
float64 T
"""
  __slots__ = ['mass','CenterOfGravity','Inertia']
  _slot_types = ['float64','kuka_robot/kr_pose_Type','kuka_robot/kr_pose_Type']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mass,CenterOfGravity,Inertia

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kr_payload_Type, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mass is None:
        self.mass = 0.
      if self.CenterOfGravity is None:
        self.CenterOfGravity = kuka_robot.msg.kr_pose_Type()
      if self.Inertia is None:
        self.Inertia = kuka_robot.msg.kr_pose_Type()
    else:
      self.mass = 0.
      self.CenterOfGravity = kuka_robot.msg.kr_pose_Type()
      self.Inertia = kuka_robot.msg.kr_pose_Type()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17d().pack(_x.mass, _x.CenterOfGravity.X, _x.CenterOfGravity.Y, _x.CenterOfGravity.Z, _x.CenterOfGravity.A, _x.CenterOfGravity.B, _x.CenterOfGravity.C, _x.CenterOfGravity.S, _x.CenterOfGravity.T, _x.Inertia.X, _x.Inertia.Y, _x.Inertia.Z, _x.Inertia.A, _x.Inertia.B, _x.Inertia.C, _x.Inertia.S, _x.Inertia.T))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.CenterOfGravity is None:
        self.CenterOfGravity = kuka_robot.msg.kr_pose_Type()
      if self.Inertia is None:
        self.Inertia = kuka_robot.msg.kr_pose_Type()
      end = 0
      _x = self
      start = end
      end += 136
      (_x.mass, _x.CenterOfGravity.X, _x.CenterOfGravity.Y, _x.CenterOfGravity.Z, _x.CenterOfGravity.A, _x.CenterOfGravity.B, _x.CenterOfGravity.C, _x.CenterOfGravity.S, _x.CenterOfGravity.T, _x.Inertia.X, _x.Inertia.Y, _x.Inertia.Z, _x.Inertia.A, _x.Inertia.B, _x.Inertia.C, _x.Inertia.S, _x.Inertia.T,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17d().pack(_x.mass, _x.CenterOfGravity.X, _x.CenterOfGravity.Y, _x.CenterOfGravity.Z, _x.CenterOfGravity.A, _x.CenterOfGravity.B, _x.CenterOfGravity.C, _x.CenterOfGravity.S, _x.CenterOfGravity.T, _x.Inertia.X, _x.Inertia.Y, _x.Inertia.Z, _x.Inertia.A, _x.Inertia.B, _x.Inertia.C, _x.Inertia.S, _x.Inertia.T))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.CenterOfGravity is None:
        self.CenterOfGravity = kuka_robot.msg.kr_pose_Type()
      if self.Inertia is None:
        self.Inertia = kuka_robot.msg.kr_pose_Type()
      end = 0
      _x = self
      start = end
      end += 136
      (_x.mass, _x.CenterOfGravity.X, _x.CenterOfGravity.Y, _x.CenterOfGravity.Z, _x.CenterOfGravity.A, _x.CenterOfGravity.B, _x.CenterOfGravity.C, _x.CenterOfGravity.S, _x.CenterOfGravity.T, _x.Inertia.X, _x.Inertia.Y, _x.Inertia.Z, _x.Inertia.A, _x.Inertia.B, _x.Inertia.C, _x.Inertia.S, _x.Inertia.T,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d = None
def _get_struct_17d():
    global _struct_17d
    if _struct_17d is None:
        _struct_17d = struct.Struct("<17d")
    return _struct_17d
