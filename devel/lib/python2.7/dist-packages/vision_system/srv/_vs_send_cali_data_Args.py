# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_system/vs_send_cali_data_ArgsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class vs_send_cali_data_ArgsRequest(genpy.Message):
  _md5sum = "270e49b9f757c4b2764adbe2f5b508e2"
  _type = "vision_system/vs_send_cali_data_ArgsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int64 caliD_0
int64 caliD_1
int64 caliD_2
int64 caliD_3
int64 caliD_4
int64 caliD_5
int64 caliD_6
int64 caliD_7
bool Is_HD_check

"""
  __slots__ = ['caliD_0','caliD_1','caliD_2','caliD_3','caliD_4','caliD_5','caliD_6','caliD_7','Is_HD_check']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','int64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       caliD_0,caliD_1,caliD_2,caliD_3,caliD_4,caliD_5,caliD_6,caliD_7,Is_HD_check

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vs_send_cali_data_ArgsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.caliD_0 is None:
        self.caliD_0 = 0
      if self.caliD_1 is None:
        self.caliD_1 = 0
      if self.caliD_2 is None:
        self.caliD_2 = 0
      if self.caliD_3 is None:
        self.caliD_3 = 0
      if self.caliD_4 is None:
        self.caliD_4 = 0
      if self.caliD_5 is None:
        self.caliD_5 = 0
      if self.caliD_6 is None:
        self.caliD_6 = 0
      if self.caliD_7 is None:
        self.caliD_7 = 0
      if self.Is_HD_check is None:
        self.Is_HD_check = False
    else:
      self.caliD_0 = 0
      self.caliD_1 = 0
      self.caliD_2 = 0
      self.caliD_3 = 0
      self.caliD_4 = 0
      self.caliD_5 = 0
      self.caliD_6 = 0
      self.caliD_7 = 0
      self.Is_HD_check = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8qB().pack(_x.caliD_0, _x.caliD_1, _x.caliD_2, _x.caliD_3, _x.caliD_4, _x.caliD_5, _x.caliD_6, _x.caliD_7, _x.Is_HD_check))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.caliD_0, _x.caliD_1, _x.caliD_2, _x.caliD_3, _x.caliD_4, _x.caliD_5, _x.caliD_6, _x.caliD_7, _x.Is_HD_check,) = _get_struct_8qB().unpack(str[start:end])
      self.Is_HD_check = bool(self.Is_HD_check)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8qB().pack(_x.caliD_0, _x.caliD_1, _x.caliD_2, _x.caliD_3, _x.caliD_4, _x.caliD_5, _x.caliD_6, _x.caliD_7, _x.Is_HD_check))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.caliD_0, _x.caliD_1, _x.caliD_2, _x.caliD_3, _x.caliD_4, _x.caliD_5, _x.caliD_6, _x.caliD_7, _x.Is_HD_check,) = _get_struct_8qB().unpack(str[start:end])
      self.Is_HD_check = bool(self.Is_HD_check)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8qB = None
def _get_struct_8qB():
    global _struct_8qB
    if _struct_8qB is None:
        _struct_8qB = struct.Struct("<8qB")
    return _struct_8qB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_system/vs_send_cali_data_ArgsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class vs_send_cali_data_ArgsResponse(genpy.Message):
  _md5sum = "639fa62f1f362e30fed370855c664bd5"
  _type = "vision_system/vs_send_cali_data_ArgsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int64 response


int64 result_code
"""
  __slots__ = ['response','result_code']
  _slot_types = ['int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response,result_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vs_send_cali_data_ArgsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = 0
      if self.result_code is None:
        self.result_code = 0
    else:
      self.response = 0
      self.result_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q().pack(_x.response, _x.result_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.response, _x.result_code,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q().pack(_x.response, _x.result_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.response, _x.result_code,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
class vs_send_cali_data_Args(object):
  _type          = 'vision_system/vs_send_cali_data_Args'
  _md5sum = 'f30152e5d2a43a58c59d2b40816d1dd0'
  _request_class  = vs_send_cali_data_ArgsRequest
  _response_class = vs_send_cali_data_ArgsResponse
