# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lantern_rack/lr_state_Type.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lr_state_Type(genpy.Message):
  _md5sum = "446242a7e9ff89a4043e4a4889335818"
  _type = "lantern_rack/lr_state_Type"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Timestamp [s]
float64 timestamp

# Lantern rack controller state
int64 state

# Lantern rack stack current working mode state [0-down 1-picking 2-filling 3-in trans]
int64[10] mode

# 10 Lantern rack stack level position
int64[10] level

# Lantern Racks sensor status
int64[10] sensor_state

"""
  __slots__ = ['timestamp','state','mode','level','sensor_state']
  _slot_types = ['float64','int64','int64[10]','int64[10]','int64[10]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,state,mode,level,sensor_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lr_state_Type, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.state is None:
        self.state = 0
      if self.mode is None:
        self.mode = [0] * 10
      if self.level is None:
        self.level = [0] * 10
      if self.sensor_state is None:
        self.sensor_state = [0] * 10
    else:
      self.timestamp = 0.
      self.state = 0
      self.mode = [0] * 10
      self.level = [0] * 10
      self.sensor_state = [0] * 10

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dq().pack(_x.timestamp, _x.state))
      buff.write(_get_struct_10q().pack(*self.mode))
      buff.write(_get_struct_10q().pack(*self.level))
      buff.write(_get_struct_10q().pack(*self.sensor_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.state,) = _get_struct_dq().unpack(str[start:end])
      start = end
      end += 80
      self.mode = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.level = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.sensor_state = _get_struct_10q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dq().pack(_x.timestamp, _x.state))
      buff.write(self.mode.tostring())
      buff.write(self.level.tostring())
      buff.write(self.sensor_state.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.state,) = _get_struct_dq().unpack(str[start:end])
      start = end
      end += 80
      self.mode = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.level = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.sensor_state = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10q = None
def _get_struct_10q():
    global _struct_10q
    if _struct_10q is None:
        _struct_10q = struct.Struct("<10q")
    return _struct_10q
_struct_dq = None
def _get_struct_dq():
    global _struct_dq
    if _struct_dq is None:
        _struct_dq = struct.Struct("<dq")
    return _struct_dq
