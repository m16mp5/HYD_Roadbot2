# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lidar_tracker/lt_state_Type.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lidar_tracker.msg

class lt_state_Type(genpy.Message):
  _md5sum = "e1e182e21c664b2dc04f11764f16b6e9"
  _type = "lidar_tracker/lt_state_Type"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Timestamp [s]
float64 timestamp

# DiffTime [s]
float64 lidars_difftime

# Detected Objects
lidar_tracker/lt_object_Type[] objects
int64[] trackedcone_indexes 
int64[] noncone_indexes 

# Detected Objects Stat
int64 num_of_fusedobjects

# Detected dist(X) for 8 column(Y) scanners
float64[8] columnscan_up_dist  
float64[8] columnscan_down_dist  

================================================================================
MSG: lidar_tracker/lt_object_Type
# Object ID
int64 ID
float64 IDTimestamp

# Interval [s]
float64 UpdateInterval

# Matching ratio
float64 RatioM

# Object feature points
lidar_tracker/lt_datapoint_Type MinPoint
lidar_tracker/lt_datapoint_Type IncEdge
lidar_tracker/lt_datapoint_Type DecEdge
lidar_tracker/lt_datapoint_Type CenterPoint
lidar_tracker/lt_datapoint_Type StableRefPoint

# Object size [m]
float64 Size

# Object is cone
bool Is_Cone
# Object is tracked
bool Is_Tracked

# Estimated Vel Acc
lidar_tracker/lt_datapoint_Type Est_Vel
lidar_tracker/lt_datapoint_Type Est_Acc

# Lidar data fused object
bool Is_Fused

# Estimated incline angle [rad]
lidar_tracker/lt_datapoint_Type Incline
# Estimated rotated angle [rad]
float64 Rotate


================================================================================
MSG: lidar_tracker/lt_datapoint_Type
# XY coordinate [m]
float64  Dist
float64  Angle
float64  x
float64  y
# RSSI [0~255]
float64  intensity

"""
  __slots__ = ['timestamp','lidars_difftime','objects','trackedcone_indexes','noncone_indexes','num_of_fusedobjects','columnscan_up_dist','columnscan_down_dist']
  _slot_types = ['float64','float64','lidar_tracker/lt_object_Type[]','int64[]','int64[]','int64','float64[8]','float64[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,lidars_difftime,objects,trackedcone_indexes,noncone_indexes,num_of_fusedobjects,columnscan_up_dist,columnscan_down_dist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lt_state_Type, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.lidars_difftime is None:
        self.lidars_difftime = 0.
      if self.objects is None:
        self.objects = []
      if self.trackedcone_indexes is None:
        self.trackedcone_indexes = []
      if self.noncone_indexes is None:
        self.noncone_indexes = []
      if self.num_of_fusedobjects is None:
        self.num_of_fusedobjects = 0
      if self.columnscan_up_dist is None:
        self.columnscan_up_dist = [0.] * 8
      if self.columnscan_down_dist is None:
        self.columnscan_down_dist = [0.] * 8
    else:
      self.timestamp = 0.
      self.lidars_difftime = 0.
      self.objects = []
      self.trackedcone_indexes = []
      self.noncone_indexes = []
      self.num_of_fusedobjects = 0
      self.columnscan_up_dist = [0.] * 8
      self.columnscan_down_dist = [0.] * 8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.timestamp, _x.lidars_difftime))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_q3d().pack(_x.ID, _x.IDTimestamp, _x.UpdateInterval, _x.RatioM))
        _v1 = val1.MinPoint
        _x = _v1
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v2 = val1.IncEdge
        _x = _v2
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v3 = val1.DecEdge
        _x = _v3
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v4 = val1.CenterPoint
        _x = _v4
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v5 = val1.StableRefPoint
        _x = _v5
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _x = val1
        buff.write(_get_struct_d2B().pack(_x.Size, _x.Is_Cone, _x.Is_Tracked))
        _v6 = val1.Est_Vel
        _x = _v6
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v7 = val1.Est_Acc
        _x = _v7
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        buff.write(_get_struct_B().pack(val1.Is_Fused))
        _v8 = val1.Incline
        _x = _v8
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        buff.write(_get_struct_d().pack(val1.Rotate))
      length = len(self.trackedcone_indexes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.trackedcone_indexes))
      length = len(self.noncone_indexes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.noncone_indexes))
      buff.write(_get_struct_q().pack(self.num_of_fusedobjects))
      buff.write(_get_struct_8d().pack(*self.columnscan_up_dist))
      buff.write(_get_struct_8d().pack(*self.columnscan_down_dist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.lidars_difftime,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = lidar_tracker.msg.lt_object_Type()
        _x = val1
        start = end
        end += 32
        (_x.ID, _x.IDTimestamp, _x.UpdateInterval, _x.RatioM,) = _get_struct_q3d().unpack(str[start:end])
        _v9 = val1.MinPoint
        _x = _v9
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v10 = val1.IncEdge
        _x = _v10
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v11 = val1.DecEdge
        _x = _v11
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v12 = val1.CenterPoint
        _x = _v12
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v13 = val1.StableRefPoint
        _x = _v13
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.Size, _x.Is_Cone, _x.Is_Tracked,) = _get_struct_d2B().unpack(str[start:end])
        val1.Is_Cone = bool(val1.Is_Cone)
        val1.Is_Tracked = bool(val1.Is_Tracked)
        _v14 = val1.Est_Vel
        _x = _v14
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v15 = val1.Est_Acc
        _x = _v15
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        start = end
        end += 1
        (val1.Is_Fused,) = _get_struct_B().unpack(str[start:end])
        val1.Is_Fused = bool(val1.Is_Fused)
        _v16 = val1.Incline
        _x = _v16
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        start = end
        end += 8
        (val1.Rotate,) = _get_struct_d().unpack(str[start:end])
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.trackedcone_indexes = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.noncone_indexes = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.num_of_fusedobjects,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 64
      self.columnscan_up_dist = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 64
      self.columnscan_down_dist = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.timestamp, _x.lidars_difftime))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_q3d().pack(_x.ID, _x.IDTimestamp, _x.UpdateInterval, _x.RatioM))
        _v17 = val1.MinPoint
        _x = _v17
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v18 = val1.IncEdge
        _x = _v18
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v19 = val1.DecEdge
        _x = _v19
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v20 = val1.CenterPoint
        _x = _v20
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v21 = val1.StableRefPoint
        _x = _v21
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _x = val1
        buff.write(_get_struct_d2B().pack(_x.Size, _x.Is_Cone, _x.Is_Tracked))
        _v22 = val1.Est_Vel
        _x = _v22
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        _v23 = val1.Est_Acc
        _x = _v23
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        buff.write(_get_struct_B().pack(val1.Is_Fused))
        _v24 = val1.Incline
        _x = _v24
        buff.write(_get_struct_5d().pack(_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity))
        buff.write(_get_struct_d().pack(val1.Rotate))
      length = len(self.trackedcone_indexes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.trackedcone_indexes.tostring())
      length = len(self.noncone_indexes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.noncone_indexes.tostring())
      buff.write(_get_struct_q().pack(self.num_of_fusedobjects))
      buff.write(self.columnscan_up_dist.tostring())
      buff.write(self.columnscan_down_dist.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.lidars_difftime,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = lidar_tracker.msg.lt_object_Type()
        _x = val1
        start = end
        end += 32
        (_x.ID, _x.IDTimestamp, _x.UpdateInterval, _x.RatioM,) = _get_struct_q3d().unpack(str[start:end])
        _v25 = val1.MinPoint
        _x = _v25
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v26 = val1.IncEdge
        _x = _v26
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v27 = val1.DecEdge
        _x = _v27
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v28 = val1.CenterPoint
        _x = _v28
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v29 = val1.StableRefPoint
        _x = _v29
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.Size, _x.Is_Cone, _x.Is_Tracked,) = _get_struct_d2B().unpack(str[start:end])
        val1.Is_Cone = bool(val1.Is_Cone)
        val1.Is_Tracked = bool(val1.Is_Tracked)
        _v30 = val1.Est_Vel
        _x = _v30
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        _v31 = val1.Est_Acc
        _x = _v31
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        start = end
        end += 1
        (val1.Is_Fused,) = _get_struct_B().unpack(str[start:end])
        val1.Is_Fused = bool(val1.Is_Fused)
        _v32 = val1.Incline
        _x = _v32
        start = end
        end += 40
        (_x.Dist, _x.Angle, _x.x, _x.y, _x.intensity,) = _get_struct_5d().unpack(str[start:end])
        start = end
        end += 8
        (val1.Rotate,) = _get_struct_d().unpack(str[start:end])
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.trackedcone_indexes = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.noncone_indexes = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 8
      (self.num_of_fusedobjects,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 64
      self.columnscan_up_dist = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
      start = end
      end += 64
      self.columnscan_down_dist = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q3d = None
def _get_struct_q3d():
    global _struct_q3d
    if _struct_q3d is None:
        _struct_q3d = struct.Struct("<q3d")
    return _struct_q3d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_d2B = None
def _get_struct_d2B():
    global _struct_d2B
    if _struct_d2B is None:
        _struct_d2B = struct.Struct("<d2B")
    return _struct_d2B
