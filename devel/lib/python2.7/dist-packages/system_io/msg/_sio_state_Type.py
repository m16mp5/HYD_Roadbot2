# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from system_io/sio_state_Type.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class sio_state_Type(genpy.Message):
  _md5sum = "bb6f89f27eead6c5199e33a55449f841"
  _type = "system_io/sio_state_Type"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Timestamp [s]
float64 timestamp

# Ethernet IO raw states
int64 state
int64[18] input_pin
int64[18] output_pin

# LB states
bool llb_has_cone
bool rlb_has_cone

# slider switch states
bool rear_slider_down
bool cone_slider_extend

# air pump switch states
bool airpump_on

# arrow light switch states
bool arrowlight_on
"""
  __slots__ = ['timestamp','state','input_pin','output_pin','llb_has_cone','rlb_has_cone','rear_slider_down','cone_slider_extend','airpump_on','arrowlight_on']
  _slot_types = ['float64','int64','int64[18]','int64[18]','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,state,input_pin,output_pin,llb_has_cone,rlb_has_cone,rear_slider_down,cone_slider_extend,airpump_on,arrowlight_on

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sio_state_Type, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.state is None:
        self.state = 0
      if self.input_pin is None:
        self.input_pin = [0] * 18
      if self.output_pin is None:
        self.output_pin = [0] * 18
      if self.llb_has_cone is None:
        self.llb_has_cone = False
      if self.rlb_has_cone is None:
        self.rlb_has_cone = False
      if self.rear_slider_down is None:
        self.rear_slider_down = False
      if self.cone_slider_extend is None:
        self.cone_slider_extend = False
      if self.airpump_on is None:
        self.airpump_on = False
      if self.arrowlight_on is None:
        self.arrowlight_on = False
    else:
      self.timestamp = 0.
      self.state = 0
      self.input_pin = [0] * 18
      self.output_pin = [0] * 18
      self.llb_has_cone = False
      self.rlb_has_cone = False
      self.rear_slider_down = False
      self.cone_slider_extend = False
      self.airpump_on = False
      self.arrowlight_on = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dq().pack(_x.timestamp, _x.state))
      buff.write(_get_struct_18q().pack(*self.input_pin))
      buff.write(_get_struct_18q().pack(*self.output_pin))
      _x = self
      buff.write(_get_struct_6B().pack(_x.llb_has_cone, _x.rlb_has_cone, _x.rear_slider_down, _x.cone_slider_extend, _x.airpump_on, _x.arrowlight_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.state,) = _get_struct_dq().unpack(str[start:end])
      start = end
      end += 144
      self.input_pin = _get_struct_18q().unpack(str[start:end])
      start = end
      end += 144
      self.output_pin = _get_struct_18q().unpack(str[start:end])
      _x = self
      start = end
      end += 6
      (_x.llb_has_cone, _x.rlb_has_cone, _x.rear_slider_down, _x.cone_slider_extend, _x.airpump_on, _x.arrowlight_on,) = _get_struct_6B().unpack(str[start:end])
      self.llb_has_cone = bool(self.llb_has_cone)
      self.rlb_has_cone = bool(self.rlb_has_cone)
      self.rear_slider_down = bool(self.rear_slider_down)
      self.cone_slider_extend = bool(self.cone_slider_extend)
      self.airpump_on = bool(self.airpump_on)
      self.arrowlight_on = bool(self.arrowlight_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dq().pack(_x.timestamp, _x.state))
      buff.write(self.input_pin.tostring())
      buff.write(self.output_pin.tostring())
      _x = self
      buff.write(_get_struct_6B().pack(_x.llb_has_cone, _x.rlb_has_cone, _x.rear_slider_down, _x.cone_slider_extend, _x.airpump_on, _x.arrowlight_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.state,) = _get_struct_dq().unpack(str[start:end])
      start = end
      end += 144
      self.input_pin = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=18)
      start = end
      end += 144
      self.output_pin = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=18)
      _x = self
      start = end
      end += 6
      (_x.llb_has_cone, _x.rlb_has_cone, _x.rear_slider_down, _x.cone_slider_extend, _x.airpump_on, _x.arrowlight_on,) = _get_struct_6B().unpack(str[start:end])
      self.llb_has_cone = bool(self.llb_has_cone)
      self.rlb_has_cone = bool(self.rlb_has_cone)
      self.rear_slider_down = bool(self.rear_slider_down)
      self.cone_slider_extend = bool(self.cone_slider_extend)
      self.airpump_on = bool(self.airpump_on)
      self.arrowlight_on = bool(self.arrowlight_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_18q = None
def _get_struct_18q():
    global _struct_18q
    if _struct_18q is None:
        _struct_18q = struct.Struct("<18q")
    return _struct_18q
_struct_dq = None
def _get_struct_dq():
    global _struct_dq
    if _struct_dq is None:
        _struct_dq = struct.Struct("<dq")
    return _struct_dq
