# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roadbot_control/ac_state_Type.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ac_state_Type(genpy.Message):
  _md5sum = "ab807b4f227aecbfa526561d1e53b40a"
  _type = "roadbot_control/ac_state_Type"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Timestamp [s]
float64 timestamp

# Robot Arm State Machine states
int64 reararm_sm
int64 frontarm_sm

# Robot Arm Target Lock states
int64 target_id
float64 target_pos_X
float64 target_pos_Y
float64 target_pos_Z
float64 target_vel_X
float64 target_vel_Y
float64 target_vel_Z
float64 target_acc_X
float64 target_acc_Y
float64 target_acc_Z

# Robot Arm Line Track states
float64 roadmarkline_pos_X
float64 roadmarkline_pos_Y

# Place and Collect progress
int64 progress_place_count
int64 progress_place_in_total
int64 progress_collect_count
int64 progress_collect_in_total

# Cone Storage states
int64 sb_slider_position
int64 sb_cones_in_total
int64[] sb_cones_in_stack
int64 sb_current_stack
int64 sb_current_stacklevel

# Loading Bay States
int64 lb_left_slot
int64 lb_right_slot

# Lanterns Rack States
int64 lr_lanterns_in_total
int64[] lr_lanterns_in_stack
int64 lr_current_stack
int64 lr_current_stacklevel

# Rear blockage detection
bool rearDetectObjectInDeadZone
bool rearDetectObjectInPlaceZoneRight
bool rearDetectObjectInPlaceZoneCenter
bool rearDetectObjectInPlaceZoneLeft
bool rearDetectNonLockObjectInOperationZone

"""
  __slots__ = ['timestamp','reararm_sm','frontarm_sm','target_id','target_pos_X','target_pos_Y','target_pos_Z','target_vel_X','target_vel_Y','target_vel_Z','target_acc_X','target_acc_Y','target_acc_Z','roadmarkline_pos_X','roadmarkline_pos_Y','progress_place_count','progress_place_in_total','progress_collect_count','progress_collect_in_total','sb_slider_position','sb_cones_in_total','sb_cones_in_stack','sb_current_stack','sb_current_stacklevel','lb_left_slot','lb_right_slot','lr_lanterns_in_total','lr_lanterns_in_stack','lr_current_stack','lr_current_stacklevel','rearDetectObjectInDeadZone','rearDetectObjectInPlaceZoneRight','rearDetectObjectInPlaceZoneCenter','rearDetectObjectInPlaceZoneLeft','rearDetectNonLockObjectInOperationZone']
  _slot_types = ['float64','int64','int64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64','int64','int64','int64','int64','int64[]','int64','int64','int64','int64','int64','int64[]','int64','int64','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,reararm_sm,frontarm_sm,target_id,target_pos_X,target_pos_Y,target_pos_Z,target_vel_X,target_vel_Y,target_vel_Z,target_acc_X,target_acc_Y,target_acc_Z,roadmarkline_pos_X,roadmarkline_pos_Y,progress_place_count,progress_place_in_total,progress_collect_count,progress_collect_in_total,sb_slider_position,sb_cones_in_total,sb_cones_in_stack,sb_current_stack,sb_current_stacklevel,lb_left_slot,lb_right_slot,lr_lanterns_in_total,lr_lanterns_in_stack,lr_current_stack,lr_current_stacklevel,rearDetectObjectInDeadZone,rearDetectObjectInPlaceZoneRight,rearDetectObjectInPlaceZoneCenter,rearDetectObjectInPlaceZoneLeft,rearDetectNonLockObjectInOperationZone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ac_state_Type, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.reararm_sm is None:
        self.reararm_sm = 0
      if self.frontarm_sm is None:
        self.frontarm_sm = 0
      if self.target_id is None:
        self.target_id = 0
      if self.target_pos_X is None:
        self.target_pos_X = 0.
      if self.target_pos_Y is None:
        self.target_pos_Y = 0.
      if self.target_pos_Z is None:
        self.target_pos_Z = 0.
      if self.target_vel_X is None:
        self.target_vel_X = 0.
      if self.target_vel_Y is None:
        self.target_vel_Y = 0.
      if self.target_vel_Z is None:
        self.target_vel_Z = 0.
      if self.target_acc_X is None:
        self.target_acc_X = 0.
      if self.target_acc_Y is None:
        self.target_acc_Y = 0.
      if self.target_acc_Z is None:
        self.target_acc_Z = 0.
      if self.roadmarkline_pos_X is None:
        self.roadmarkline_pos_X = 0.
      if self.roadmarkline_pos_Y is None:
        self.roadmarkline_pos_Y = 0.
      if self.progress_place_count is None:
        self.progress_place_count = 0
      if self.progress_place_in_total is None:
        self.progress_place_in_total = 0
      if self.progress_collect_count is None:
        self.progress_collect_count = 0
      if self.progress_collect_in_total is None:
        self.progress_collect_in_total = 0
      if self.sb_slider_position is None:
        self.sb_slider_position = 0
      if self.sb_cones_in_total is None:
        self.sb_cones_in_total = 0
      if self.sb_cones_in_stack is None:
        self.sb_cones_in_stack = []
      if self.sb_current_stack is None:
        self.sb_current_stack = 0
      if self.sb_current_stacklevel is None:
        self.sb_current_stacklevel = 0
      if self.lb_left_slot is None:
        self.lb_left_slot = 0
      if self.lb_right_slot is None:
        self.lb_right_slot = 0
      if self.lr_lanterns_in_total is None:
        self.lr_lanterns_in_total = 0
      if self.lr_lanterns_in_stack is None:
        self.lr_lanterns_in_stack = []
      if self.lr_current_stack is None:
        self.lr_current_stack = 0
      if self.lr_current_stacklevel is None:
        self.lr_current_stacklevel = 0
      if self.rearDetectObjectInDeadZone is None:
        self.rearDetectObjectInDeadZone = False
      if self.rearDetectObjectInPlaceZoneRight is None:
        self.rearDetectObjectInPlaceZoneRight = False
      if self.rearDetectObjectInPlaceZoneCenter is None:
        self.rearDetectObjectInPlaceZoneCenter = False
      if self.rearDetectObjectInPlaceZoneLeft is None:
        self.rearDetectObjectInPlaceZoneLeft = False
      if self.rearDetectNonLockObjectInOperationZone is None:
        self.rearDetectNonLockObjectInOperationZone = False
    else:
      self.timestamp = 0.
      self.reararm_sm = 0
      self.frontarm_sm = 0
      self.target_id = 0
      self.target_pos_X = 0.
      self.target_pos_Y = 0.
      self.target_pos_Z = 0.
      self.target_vel_X = 0.
      self.target_vel_Y = 0.
      self.target_vel_Z = 0.
      self.target_acc_X = 0.
      self.target_acc_Y = 0.
      self.target_acc_Z = 0.
      self.roadmarkline_pos_X = 0.
      self.roadmarkline_pos_Y = 0.
      self.progress_place_count = 0
      self.progress_place_in_total = 0
      self.progress_collect_count = 0
      self.progress_collect_in_total = 0
      self.sb_slider_position = 0
      self.sb_cones_in_total = 0
      self.sb_cones_in_stack = []
      self.sb_current_stack = 0
      self.sb_current_stacklevel = 0
      self.lb_left_slot = 0
      self.lb_right_slot = 0
      self.lr_lanterns_in_total = 0
      self.lr_lanterns_in_stack = []
      self.lr_current_stack = 0
      self.lr_current_stacklevel = 0
      self.rearDetectObjectInDeadZone = False
      self.rearDetectObjectInPlaceZoneRight = False
      self.rearDetectObjectInPlaceZoneCenter = False
      self.rearDetectObjectInPlaceZoneLeft = False
      self.rearDetectNonLockObjectInOperationZone = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d3q11d6q().pack(_x.timestamp, _x.reararm_sm, _x.frontarm_sm, _x.target_id, _x.target_pos_X, _x.target_pos_Y, _x.target_pos_Z, _x.target_vel_X, _x.target_vel_Y, _x.target_vel_Z, _x.target_acc_X, _x.target_acc_Y, _x.target_acc_Z, _x.roadmarkline_pos_X, _x.roadmarkline_pos_Y, _x.progress_place_count, _x.progress_place_in_total, _x.progress_collect_count, _x.progress_collect_in_total, _x.sb_slider_position, _x.sb_cones_in_total))
      length = len(self.sb_cones_in_stack)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.sb_cones_in_stack))
      _x = self
      buff.write(_get_struct_5q().pack(_x.sb_current_stack, _x.sb_current_stacklevel, _x.lb_left_slot, _x.lb_right_slot, _x.lr_lanterns_in_total))
      length = len(self.lr_lanterns_in_stack)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.lr_lanterns_in_stack))
      _x = self
      buff.write(_get_struct_2q5B().pack(_x.lr_current_stack, _x.lr_current_stacklevel, _x.rearDetectObjectInDeadZone, _x.rearDetectObjectInPlaceZoneRight, _x.rearDetectObjectInPlaceZoneCenter, _x.rearDetectObjectInPlaceZoneLeft, _x.rearDetectNonLockObjectInOperationZone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 168
      (_x.timestamp, _x.reararm_sm, _x.frontarm_sm, _x.target_id, _x.target_pos_X, _x.target_pos_Y, _x.target_pos_Z, _x.target_vel_X, _x.target_vel_Y, _x.target_vel_Z, _x.target_acc_X, _x.target_acc_Y, _x.target_acc_Z, _x.roadmarkline_pos_X, _x.roadmarkline_pos_Y, _x.progress_place_count, _x.progress_place_in_total, _x.progress_collect_count, _x.progress_collect_in_total, _x.sb_slider_position, _x.sb_cones_in_total,) = _get_struct_d3q11d6q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.sb_cones_in_stack = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 40
      (_x.sb_current_stack, _x.sb_current_stacklevel, _x.lb_left_slot, _x.lb_right_slot, _x.lr_lanterns_in_total,) = _get_struct_5q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.lr_lanterns_in_stack = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 21
      (_x.lr_current_stack, _x.lr_current_stacklevel, _x.rearDetectObjectInDeadZone, _x.rearDetectObjectInPlaceZoneRight, _x.rearDetectObjectInPlaceZoneCenter, _x.rearDetectObjectInPlaceZoneLeft, _x.rearDetectNonLockObjectInOperationZone,) = _get_struct_2q5B().unpack(str[start:end])
      self.rearDetectObjectInDeadZone = bool(self.rearDetectObjectInDeadZone)
      self.rearDetectObjectInPlaceZoneRight = bool(self.rearDetectObjectInPlaceZoneRight)
      self.rearDetectObjectInPlaceZoneCenter = bool(self.rearDetectObjectInPlaceZoneCenter)
      self.rearDetectObjectInPlaceZoneLeft = bool(self.rearDetectObjectInPlaceZoneLeft)
      self.rearDetectNonLockObjectInOperationZone = bool(self.rearDetectNonLockObjectInOperationZone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d3q11d6q().pack(_x.timestamp, _x.reararm_sm, _x.frontarm_sm, _x.target_id, _x.target_pos_X, _x.target_pos_Y, _x.target_pos_Z, _x.target_vel_X, _x.target_vel_Y, _x.target_vel_Z, _x.target_acc_X, _x.target_acc_Y, _x.target_acc_Z, _x.roadmarkline_pos_X, _x.roadmarkline_pos_Y, _x.progress_place_count, _x.progress_place_in_total, _x.progress_collect_count, _x.progress_collect_in_total, _x.sb_slider_position, _x.sb_cones_in_total))
      length = len(self.sb_cones_in_stack)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.sb_cones_in_stack.tostring())
      _x = self
      buff.write(_get_struct_5q().pack(_x.sb_current_stack, _x.sb_current_stacklevel, _x.lb_left_slot, _x.lb_right_slot, _x.lr_lanterns_in_total))
      length = len(self.lr_lanterns_in_stack)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.lr_lanterns_in_stack.tostring())
      _x = self
      buff.write(_get_struct_2q5B().pack(_x.lr_current_stack, _x.lr_current_stacklevel, _x.rearDetectObjectInDeadZone, _x.rearDetectObjectInPlaceZoneRight, _x.rearDetectObjectInPlaceZoneCenter, _x.rearDetectObjectInPlaceZoneLeft, _x.rearDetectNonLockObjectInOperationZone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 168
      (_x.timestamp, _x.reararm_sm, _x.frontarm_sm, _x.target_id, _x.target_pos_X, _x.target_pos_Y, _x.target_pos_Z, _x.target_vel_X, _x.target_vel_Y, _x.target_vel_Z, _x.target_acc_X, _x.target_acc_Y, _x.target_acc_Z, _x.roadmarkline_pos_X, _x.roadmarkline_pos_Y, _x.progress_place_count, _x.progress_place_in_total, _x.progress_collect_count, _x.progress_collect_in_total, _x.sb_slider_position, _x.sb_cones_in_total,) = _get_struct_d3q11d6q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.sb_cones_in_stack = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      _x = self
      start = end
      end += 40
      (_x.sb_current_stack, _x.sb_current_stacklevel, _x.lb_left_slot, _x.lb_right_slot, _x.lr_lanterns_in_total,) = _get_struct_5q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.lr_lanterns_in_stack = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      _x = self
      start = end
      end += 21
      (_x.lr_current_stack, _x.lr_current_stacklevel, _x.rearDetectObjectInDeadZone, _x.rearDetectObjectInPlaceZoneRight, _x.rearDetectObjectInPlaceZoneCenter, _x.rearDetectObjectInPlaceZoneLeft, _x.rearDetectNonLockObjectInOperationZone,) = _get_struct_2q5B().unpack(str[start:end])
      self.rearDetectObjectInDeadZone = bool(self.rearDetectObjectInDeadZone)
      self.rearDetectObjectInPlaceZoneRight = bool(self.rearDetectObjectInPlaceZoneRight)
      self.rearDetectObjectInPlaceZoneCenter = bool(self.rearDetectObjectInPlaceZoneCenter)
      self.rearDetectObjectInPlaceZoneLeft = bool(self.rearDetectObjectInPlaceZoneLeft)
      self.rearDetectNonLockObjectInOperationZone = bool(self.rearDetectNonLockObjectInOperationZone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5q = None
def _get_struct_5q():
    global _struct_5q
    if _struct_5q is None:
        _struct_5q = struct.Struct("<5q")
    return _struct_5q
_struct_d3q11d6q = None
def _get_struct_d3q11d6q():
    global _struct_d3q11d6q
    if _struct_d3q11d6q is None:
        _struct_d3q11d6q = struct.Struct("<d3q11d6q")
    return _struct_d3q11d6q
_struct_2q5B = None
def _get_struct_2q5B():
    global _struct_2q5B
    if _struct_2q5B is None:
        _struct_2q5B = struct.Struct("<2q5B")
    return _struct_2q5B
