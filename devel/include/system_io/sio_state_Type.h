// Generated by gencpp from file system_io/sio_state_Type.msg
// DO NOT EDIT!


#ifndef SYSTEM_IO_MESSAGE_SIO_STATE_TYPE_H
#define SYSTEM_IO_MESSAGE_SIO_STATE_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace system_io
{
template <class ContainerAllocator>
struct sio_state_Type_
{
  typedef sio_state_Type_<ContainerAllocator> Type;

  sio_state_Type_()
    : timestamp(0.0)
    , state(0)
    , input_pin()
    , output_pin()
    , llb_has_cone(false)
    , rlb_has_cone(false)
    , rear_slider_down(false)
    , cone_slider_extend(false)
    , airpump_on(false)
    , arrowlight_on(false)  {
      input_pin.assign(0);

      output_pin.assign(0);
  }
  sio_state_Type_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , state(0)
    , input_pin()
    , output_pin()
    , llb_has_cone(false)
    , rlb_has_cone(false)
    , rear_slider_down(false)
    , cone_slider_extend(false)
    , airpump_on(false)
    , arrowlight_on(false)  {
  (void)_alloc;
      input_pin.assign(0);

      output_pin.assign(0);
  }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int64_t _state_type;
  _state_type state;

   typedef boost::array<int64_t, 18>  _input_pin_type;
  _input_pin_type input_pin;

   typedef boost::array<int64_t, 18>  _output_pin_type;
  _output_pin_type output_pin;

   typedef uint8_t _llb_has_cone_type;
  _llb_has_cone_type llb_has_cone;

   typedef uint8_t _rlb_has_cone_type;
  _rlb_has_cone_type rlb_has_cone;

   typedef uint8_t _rear_slider_down_type;
  _rear_slider_down_type rear_slider_down;

   typedef uint8_t _cone_slider_extend_type;
  _cone_slider_extend_type cone_slider_extend;

   typedef uint8_t _airpump_on_type;
  _airpump_on_type airpump_on;

   typedef uint8_t _arrowlight_on_type;
  _arrowlight_on_type arrowlight_on;





  typedef boost::shared_ptr< ::system_io::sio_state_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_io::sio_state_Type_<ContainerAllocator> const> ConstPtr;

}; // struct sio_state_Type_

typedef ::system_io::sio_state_Type_<std::allocator<void> > sio_state_Type;

typedef boost::shared_ptr< ::system_io::sio_state_Type > sio_state_TypePtr;
typedef boost::shared_ptr< ::system_io::sio_state_Type const> sio_state_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_io::sio_state_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_io::sio_state_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_io::sio_state_Type_<ContainerAllocator1> & lhs, const ::system_io::sio_state_Type_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.state == rhs.state &&
    lhs.input_pin == rhs.input_pin &&
    lhs.output_pin == rhs.output_pin &&
    lhs.llb_has_cone == rhs.llb_has_cone &&
    lhs.rlb_has_cone == rhs.rlb_has_cone &&
    lhs.rear_slider_down == rhs.rear_slider_down &&
    lhs.cone_slider_extend == rhs.cone_slider_extend &&
    lhs.airpump_on == rhs.airpump_on &&
    lhs.arrowlight_on == rhs.arrowlight_on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_io::sio_state_Type_<ContainerAllocator1> & lhs, const ::system_io::sio_state_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_io

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::system_io::sio_state_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_io::sio_state_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_io::sio_state_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_io::sio_state_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_io::sio_state_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_io::sio_state_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_io::sio_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb6f89f27eead6c5199e33a55449f841";
  }

  static const char* value(const ::system_io::sio_state_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb6f89f27eead6c5ULL;
  static const uint64_t static_value2 = 0x199e33a55449f841ULL;
};

template<class ContainerAllocator>
struct DataType< ::system_io::sio_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_io/sio_state_Type";
  }

  static const char* value(const ::system_io::sio_state_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_io::sio_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Timestamp [s]\n"
"float64 timestamp\n"
"\n"
"# Ethernet IO raw states\n"
"int64 state\n"
"int64[18] input_pin\n"
"int64[18] output_pin\n"
"\n"
"# LB states\n"
"bool llb_has_cone\n"
"bool rlb_has_cone\n"
"\n"
"# slider switch states\n"
"bool rear_slider_down\n"
"bool cone_slider_extend\n"
"\n"
"# air pump switch states\n"
"bool airpump_on\n"
"\n"
"# arrow light switch states\n"
"bool arrowlight_on\n"
;
  }

  static const char* value(const ::system_io::sio_state_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_io::sio_state_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.state);
      stream.next(m.input_pin);
      stream.next(m.output_pin);
      stream.next(m.llb_has_cone);
      stream.next(m.rlb_has_cone);
      stream.next(m.rear_slider_down);
      stream.next(m.cone_slider_extend);
      stream.next(m.airpump_on);
      stream.next(m.arrowlight_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sio_state_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_io::sio_state_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_io::sio_state_Type_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
    s << indent << "input_pin[]" << std::endl;
    for (size_t i = 0; i < v.input_pin.size(); ++i)
    {
      s << indent << "  input_pin[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.input_pin[i]);
    }
    s << indent << "output_pin[]" << std::endl;
    for (size_t i = 0; i < v.output_pin.size(); ++i)
    {
      s << indent << "  output_pin[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.output_pin[i]);
    }
    s << indent << "llb_has_cone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.llb_has_cone);
    s << indent << "rlb_has_cone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rlb_has_cone);
    s << indent << "rear_slider_down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_slider_down);
    s << indent << "cone_slider_extend: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cone_slider_extend);
    s << indent << "airpump_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.airpump_on);
    s << indent << "arrowlight_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arrowlight_on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_IO_MESSAGE_SIO_STATE_TYPE_H
