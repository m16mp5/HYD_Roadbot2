// Generated by gencpp from file kuka_robot/kr_payload_Type.msg
// DO NOT EDIT!


#ifndef KUKA_ROBOT_MESSAGE_KR_PAYLOAD_TYPE_H
#define KUKA_ROBOT_MESSAGE_KR_PAYLOAD_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuka_robot/kr_pose_Type.h>
#include <kuka_robot/kr_pose_Type.h>

namespace kuka_robot
{
template <class ContainerAllocator>
struct kr_payload_Type_
{
  typedef kr_payload_Type_<ContainerAllocator> Type;

  kr_payload_Type_()
    : mass(0.0)
    , CenterOfGravity()
    , Inertia()  {
    }
  kr_payload_Type_(const ContainerAllocator& _alloc)
    : mass(0.0)
    , CenterOfGravity(_alloc)
    , Inertia(_alloc)  {
  (void)_alloc;
    }



   typedef double _mass_type;
  _mass_type mass;

   typedef  ::kuka_robot::kr_pose_Type_<ContainerAllocator>  _CenterOfGravity_type;
  _CenterOfGravity_type CenterOfGravity;

   typedef  ::kuka_robot::kr_pose_Type_<ContainerAllocator>  _Inertia_type;
  _Inertia_type Inertia;





  typedef boost::shared_ptr< ::kuka_robot::kr_payload_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_robot::kr_payload_Type_<ContainerAllocator> const> ConstPtr;

}; // struct kr_payload_Type_

typedef ::kuka_robot::kr_payload_Type_<std::allocator<void> > kr_payload_Type;

typedef boost::shared_ptr< ::kuka_robot::kr_payload_Type > kr_payload_TypePtr;
typedef boost::shared_ptr< ::kuka_robot::kr_payload_Type const> kr_payload_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_robot::kr_payload_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_robot::kr_payload_Type_<ContainerAllocator1> & lhs, const ::kuka_robot::kr_payload_Type_<ContainerAllocator2> & rhs)
{
  return lhs.mass == rhs.mass &&
    lhs.CenterOfGravity == rhs.CenterOfGravity &&
    lhs.Inertia == rhs.Inertia;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_robot::kr_payload_Type_<ContainerAllocator1> & lhs, const ::kuka_robot::kr_payload_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_robot::kr_payload_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_robot::kr_payload_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_robot::kr_payload_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acc9595ae3c243c8e07bdd4ea0d971e4";
  }

  static const char* value(const ::kuka_robot::kr_payload_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacc9595ae3c243c8ULL;
  static const uint64_t static_value2 = 0xe07bdd4ea0d971e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_robot/kr_payload_Type";
  }

  static const char* value(const ::kuka_robot::kr_payload_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Mass [kg]\n"
"float64 mass\n"
"\n"
"# Center of mass [mm]\n"
"kuka_robot/kr_pose_Type CenterOfGravity\n"
"\n"
"# Inertia [kg-m^2]\n"
"kuka_robot/kr_pose_Type Inertia\n"
"\n"
"\n"
"================================================================================\n"
"MSG: kuka_robot/kr_pose_Type\n"
"# XYZ coordinate [mm]\n"
"float64 X\n"
"float64 Y\n"
"float64 Z\n"
"# ABC orientation [mm]\n"
"float64 A\n"
"float64 B\n"
"float64 C\n"
"# Status and Turn [unit]\n"
"float64 S\n"
"float64 T\n"
;
  }

  static const char* value(const ::kuka_robot::kr_payload_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mass);
      stream.next(m.CenterOfGravity);
      stream.next(m.Inertia);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kr_payload_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_robot::kr_payload_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_robot::kr_payload_Type_<ContainerAllocator>& v)
  {
    s << indent << "mass: ";
    Printer<double>::stream(s, indent + "  ", v.mass);
    s << indent << "CenterOfGravity: ";
    s << std::endl;
    Printer< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.CenterOfGravity);
    s << indent << "Inertia: ";
    s << std::endl;
    Printer< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.Inertia);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_ROBOT_MESSAGE_KR_PAYLOAD_TYPE_H
