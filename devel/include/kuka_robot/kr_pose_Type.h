// Generated by gencpp from file kuka_robot/kr_pose_Type.msg
// DO NOT EDIT!


#ifndef KUKA_ROBOT_MESSAGE_KR_POSE_TYPE_H
#define KUKA_ROBOT_MESSAGE_KR_POSE_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuka_robot
{
template <class ContainerAllocator>
struct kr_pose_Type_
{
  typedef kr_pose_Type_<ContainerAllocator> Type;

  kr_pose_Type_()
    : X(0.0)
    , Y(0.0)
    , Z(0.0)
    , A(0.0)
    , B(0.0)
    , C(0.0)
    , S(0.0)
    , T(0.0)  {
    }
  kr_pose_Type_(const ContainerAllocator& _alloc)
    : X(0.0)
    , Y(0.0)
    , Z(0.0)
    , A(0.0)
    , B(0.0)
    , C(0.0)
    , S(0.0)
    , T(0.0)  {
  (void)_alloc;
    }



   typedef double _X_type;
  _X_type X;

   typedef double _Y_type;
  _Y_type Y;

   typedef double _Z_type;
  _Z_type Z;

   typedef double _A_type;
  _A_type A;

   typedef double _B_type;
  _B_type B;

   typedef double _C_type;
  _C_type C;

   typedef double _S_type;
  _S_type S;

   typedef double _T_type;
  _T_type T;





  typedef boost::shared_ptr< ::kuka_robot::kr_pose_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_robot::kr_pose_Type_<ContainerAllocator> const> ConstPtr;

}; // struct kr_pose_Type_

typedef ::kuka_robot::kr_pose_Type_<std::allocator<void> > kr_pose_Type;

typedef boost::shared_ptr< ::kuka_robot::kr_pose_Type > kr_pose_TypePtr;
typedef boost::shared_ptr< ::kuka_robot::kr_pose_Type const> kr_pose_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_robot::kr_pose_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_robot::kr_pose_Type_<ContainerAllocator1> & lhs, const ::kuka_robot::kr_pose_Type_<ContainerAllocator2> & rhs)
{
  return lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.Z == rhs.Z &&
    lhs.A == rhs.A &&
    lhs.B == rhs.B &&
    lhs.C == rhs.C &&
    lhs.S == rhs.S &&
    lhs.T == rhs.T;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_robot::kr_pose_Type_<ContainerAllocator1> & lhs, const ::kuka_robot::kr_pose_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_robot::kr_pose_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_robot::kr_pose_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_robot::kr_pose_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68763b86dc393f24490d032ede03c3ee";
  }

  static const char* value(const ::kuka_robot::kr_pose_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68763b86dc393f24ULL;
  static const uint64_t static_value2 = 0x490d032ede03c3eeULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_robot/kr_pose_Type";
  }

  static const char* value(const ::kuka_robot::kr_pose_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# XYZ coordinate [mm]\n"
"float64 X\n"
"float64 Y\n"
"float64 Z\n"
"# ABC orientation [mm]\n"
"float64 A\n"
"float64 B\n"
"float64 C\n"
"# Status and Turn [unit]\n"
"float64 S\n"
"float64 T\n"
;
  }

  static const char* value(const ::kuka_robot::kr_pose_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.Z);
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.C);
      stream.next(m.S);
      stream.next(m.T);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kr_pose_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_robot::kr_pose_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_robot::kr_pose_Type_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<double>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<double>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<double>::stream(s, indent + "  ", v.Z);
    s << indent << "A: ";
    Printer<double>::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    Printer<double>::stream(s, indent + "  ", v.B);
    s << indent << "C: ";
    Printer<double>::stream(s, indent + "  ", v.C);
    s << indent << "S: ";
    Printer<double>::stream(s, indent + "  ", v.S);
    s << indent << "T: ";
    Printer<double>::stream(s, indent + "  ", v.T);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_ROBOT_MESSAGE_KR_POSE_TYPE_H
