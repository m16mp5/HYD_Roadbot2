// Generated by gencpp from file kuka_robot/kr_robot_error_Type.msg
// DO NOT EDIT!


#ifndef KUKA_ROBOT_MESSAGE_KR_ROBOT_ERROR_TYPE_H
#define KUKA_ROBOT_MESSAGE_KR_ROBOT_ERROR_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuka_robot
{
template <class ContainerAllocator>
struct kr_robot_error_Type_
{
  typedef kr_robot_error_Type_<ContainerAllocator> Type;

  kr_robot_error_Type_()
    : number(0)
    , interpreter()
    , int_type()
    , int_prio(0)
    , line_nr(0)
    , module()
    , up_name()
    , trigger_type()  {
    }
  kr_robot_error_Type_(const ContainerAllocator& _alloc)
    : number(0)
    , interpreter(_alloc)
    , int_type(_alloc)
    , int_prio(0)
    , line_nr(0)
    , module(_alloc)
    , up_name(_alloc)
    , trigger_type(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _number_type;
  _number_type number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _interpreter_type;
  _interpreter_type interpreter;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _int_type_type;
  _int_type_type int_type;

   typedef int64_t _int_prio_type;
  _int_prio_type int_prio;

   typedef int64_t _line_nr_type;
  _line_nr_type line_nr;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _module_type;
  _module_type module;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _up_name_type;
  _up_name_type up_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _trigger_type_type;
  _trigger_type_type trigger_type;





  typedef boost::shared_ptr< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> const> ConstPtr;

}; // struct kr_robot_error_Type_

typedef ::kuka_robot::kr_robot_error_Type_<std::allocator<void> > kr_robot_error_Type;

typedef boost::shared_ptr< ::kuka_robot::kr_robot_error_Type > kr_robot_error_TypePtr;
typedef boost::shared_ptr< ::kuka_robot::kr_robot_error_Type const> kr_robot_error_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator1> & lhs, const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.interpreter == rhs.interpreter &&
    lhs.int_type == rhs.int_type &&
    lhs.int_prio == rhs.int_prio &&
    lhs.line_nr == rhs.line_nr &&
    lhs.module == rhs.module &&
    lhs.up_name == rhs.up_name &&
    lhs.trigger_type == rhs.trigger_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator1> & lhs, const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14c7fac1baea6ae7d763b4c80cd47929";
  }

  static const char* value(const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14c7fac1baea6ae7ULL;
  static const uint64_t static_value2 = 0xd763b4c80cd47929ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_robot/kr_robot_error_Type";
  }

  static const char* value(const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Error number\n"
"int64 number\n"
"\n"
"# R_INT\n"
"string interpreter\n"
"\n"
"# I_NORMAL\n"
"string int_type\n"
"\n"
"# Prio\n"
"int64 int_prio\n"
"\n"
"# Line number\n"
"int64 line_nr\n"
"\n"
"# Module name\n"
"string module\n"
"\n"
"# Up name\n"
"string up_name\n"
"\n"
"# TRG_NONE\n"
"string trigger_type\n"
"\n"
;
  }

  static const char* value(const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.interpreter);
      stream.next(m.int_type);
      stream.next(m.int_prio);
      stream.next(m.line_nr);
      stream.next(m.module);
      stream.next(m.up_name);
      stream.next(m.trigger_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kr_robot_error_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_robot::kr_robot_error_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_robot::kr_robot_error_Type_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.number);
    s << indent << "interpreter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.interpreter);
    s << indent << "int_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.int_type);
    s << indent << "int_prio: ";
    Printer<int64_t>::stream(s, indent + "  ", v.int_prio);
    s << indent << "line_nr: ";
    Printer<int64_t>::stream(s, indent + "  ", v.line_nr);
    s << indent << "module: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.module);
    s << indent << "up_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.up_name);
    s << indent << "trigger_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.trigger_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_ROBOT_MESSAGE_KR_ROBOT_ERROR_TYPE_H
