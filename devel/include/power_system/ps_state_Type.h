// Generated by gencpp from file power_system/ps_state_Type.msg
// DO NOT EDIT!


#ifndef POWER_SYSTEM_MESSAGE_PS_STATE_TYPE_H
#define POWER_SYSTEM_MESSAGE_PS_STATE_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace power_system
{
template <class ContainerAllocator>
struct ps_state_Type_
{
  typedef ps_state_Type_<ContainerAllocator> Type;

  ps_state_Type_()
    : timestamp(0.0)
    , th_temperature()
    , th_humidity()
    , meter_phA_V()
    , meter_phB_V()
    , meter_phC_V()
    , meter_phA_I()
    , meter_phB_I()
    , meter_phC_I()
    , meter_tot_W()
    , meter_phA_W()
    , meter_phB_W()
    , meter_phC_W()
    , mcb_V()
    , mcb_I()
    , mcb_sw_pos()
    , state_temphum()
    , state_meter()
    , state_mcb()  {
      th_temperature.assign(0.0);

      th_humidity.assign(0.0);

      meter_phA_V.assign(0.0);

      meter_phB_V.assign(0.0);

      meter_phC_V.assign(0.0);

      meter_phA_I.assign(0.0);

      meter_phB_I.assign(0.0);

      meter_phC_I.assign(0.0);

      meter_tot_W.assign(0.0);

      meter_phA_W.assign(0.0);

      meter_phB_W.assign(0.0);

      meter_phC_W.assign(0.0);

      mcb_V.assign(0.0);

      mcb_I.assign(0.0);

      mcb_sw_pos.assign(0);

      state_temphum.assign(0);

      state_meter.assign(0);

      state_mcb.assign(0);
  }
  ps_state_Type_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , th_temperature()
    , th_humidity()
    , meter_phA_V()
    , meter_phB_V()
    , meter_phC_V()
    , meter_phA_I()
    , meter_phB_I()
    , meter_phC_I()
    , meter_tot_W()
    , meter_phA_W()
    , meter_phB_W()
    , meter_phC_W()
    , mcb_V()
    , mcb_I()
    , mcb_sw_pos()
    , state_temphum()
    , state_meter()
    , state_mcb()  {
  (void)_alloc;
      th_temperature.assign(0.0);

      th_humidity.assign(0.0);

      meter_phA_V.assign(0.0);

      meter_phB_V.assign(0.0);

      meter_phC_V.assign(0.0);

      meter_phA_I.assign(0.0);

      meter_phB_I.assign(0.0);

      meter_phC_I.assign(0.0);

      meter_tot_W.assign(0.0);

      meter_phA_W.assign(0.0);

      meter_phB_W.assign(0.0);

      meter_phC_W.assign(0.0);

      mcb_V.assign(0.0);

      mcb_I.assign(0.0);

      mcb_sw_pos.assign(0);

      state_temphum.assign(0);

      state_meter.assign(0);

      state_mcb.assign(0);
  }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<double, 2>  _th_temperature_type;
  _th_temperature_type th_temperature;

   typedef boost::array<double, 2>  _th_humidity_type;
  _th_humidity_type th_humidity;

   typedef boost::array<double, 2>  _meter_phA_V_type;
  _meter_phA_V_type meter_phA_V;

   typedef boost::array<double, 2>  _meter_phB_V_type;
  _meter_phB_V_type meter_phB_V;

   typedef boost::array<double, 2>  _meter_phC_V_type;
  _meter_phC_V_type meter_phC_V;

   typedef boost::array<double, 2>  _meter_phA_I_type;
  _meter_phA_I_type meter_phA_I;

   typedef boost::array<double, 2>  _meter_phB_I_type;
  _meter_phB_I_type meter_phB_I;

   typedef boost::array<double, 2>  _meter_phC_I_type;
  _meter_phC_I_type meter_phC_I;

   typedef boost::array<double, 2>  _meter_tot_W_type;
  _meter_tot_W_type meter_tot_W;

   typedef boost::array<double, 2>  _meter_phA_W_type;
  _meter_phA_W_type meter_phA_W;

   typedef boost::array<double, 2>  _meter_phB_W_type;
  _meter_phB_W_type meter_phB_W;

   typedef boost::array<double, 2>  _meter_phC_W_type;
  _meter_phC_W_type meter_phC_W;

   typedef boost::array<double, 2>  _mcb_V_type;
  _mcb_V_type mcb_V;

   typedef boost::array<double, 2>  _mcb_I_type;
  _mcb_I_type mcb_I;

   typedef boost::array<int64_t, 2>  _mcb_sw_pos_type;
  _mcb_sw_pos_type mcb_sw_pos;

   typedef boost::array<int64_t, 2>  _state_temphum_type;
  _state_temphum_type state_temphum;

   typedef boost::array<int64_t, 2>  _state_meter_type;
  _state_meter_type state_meter;

   typedef boost::array<int64_t, 2>  _state_mcb_type;
  _state_mcb_type state_mcb;





  typedef boost::shared_ptr< ::power_system::ps_state_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::power_system::ps_state_Type_<ContainerAllocator> const> ConstPtr;

}; // struct ps_state_Type_

typedef ::power_system::ps_state_Type_<std::allocator<void> > ps_state_Type;

typedef boost::shared_ptr< ::power_system::ps_state_Type > ps_state_TypePtr;
typedef boost::shared_ptr< ::power_system::ps_state_Type const> ps_state_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::power_system::ps_state_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::power_system::ps_state_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::power_system::ps_state_Type_<ContainerAllocator1> & lhs, const ::power_system::ps_state_Type_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.th_temperature == rhs.th_temperature &&
    lhs.th_humidity == rhs.th_humidity &&
    lhs.meter_phA_V == rhs.meter_phA_V &&
    lhs.meter_phB_V == rhs.meter_phB_V &&
    lhs.meter_phC_V == rhs.meter_phC_V &&
    lhs.meter_phA_I == rhs.meter_phA_I &&
    lhs.meter_phB_I == rhs.meter_phB_I &&
    lhs.meter_phC_I == rhs.meter_phC_I &&
    lhs.meter_tot_W == rhs.meter_tot_W &&
    lhs.meter_phA_W == rhs.meter_phA_W &&
    lhs.meter_phB_W == rhs.meter_phB_W &&
    lhs.meter_phC_W == rhs.meter_phC_W &&
    lhs.mcb_V == rhs.mcb_V &&
    lhs.mcb_I == rhs.mcb_I &&
    lhs.mcb_sw_pos == rhs.mcb_sw_pos &&
    lhs.state_temphum == rhs.state_temphum &&
    lhs.state_meter == rhs.state_meter &&
    lhs.state_mcb == rhs.state_mcb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::power_system::ps_state_Type_<ContainerAllocator1> & lhs, const ::power_system::ps_state_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace power_system

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::power_system::ps_state_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::power_system::ps_state_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::power_system::ps_state_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::power_system::ps_state_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::power_system::ps_state_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::power_system::ps_state_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::power_system::ps_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e128e49adf15f8c39cb073cd0ec61c2e";
  }

  static const char* value(const ::power_system::ps_state_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe128e49adf15f8c3ULL;
  static const uint64_t static_value2 = 0x9cb073cd0ec61c2eULL;
};

template<class ContainerAllocator>
struct DataType< ::power_system::ps_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "power_system/ps_state_Type";
  }

  static const char* value(const ::power_system::ps_state_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::power_system::ps_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Timestamp [s]\n"
"float64 timestamp\n"
"\n"
"# 2 humidity and sensor readings\n"
"float64[2] th_temperature\n"
"float64[2] th_humidity\n"
"\n"
"# 2 3-phase meter sensor readings\n"
"float64[2] meter_phA_V\n"
"float64[2] meter_phB_V\n"
"float64[2] meter_phC_V\n"
"float64[2] meter_phA_I\n"
"float64[2] meter_phB_I\n"
"float64[2] meter_phC_I\n"
"float64[2] meter_tot_W\n"
"float64[2] meter_phA_W\n"
"float64[2] meter_phB_W\n"
"float64[2] meter_phC_W\n"
"\n"
"# 2 3-phase inverter MCB readings\n"
"float64[2] mcb_V\n"
"float64[2] mcb_I\n"
"int64[2] mcb_sw_pos\n"
"\n"
"# sensor boxes error state\n"
"int64[2] state_temphum\n"
"int64[2] state_meter\n"
"int64[2] state_mcb\n"
;
  }

  static const char* value(const ::power_system::ps_state_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::power_system::ps_state_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.th_temperature);
      stream.next(m.th_humidity);
      stream.next(m.meter_phA_V);
      stream.next(m.meter_phB_V);
      stream.next(m.meter_phC_V);
      stream.next(m.meter_phA_I);
      stream.next(m.meter_phB_I);
      stream.next(m.meter_phC_I);
      stream.next(m.meter_tot_W);
      stream.next(m.meter_phA_W);
      stream.next(m.meter_phB_W);
      stream.next(m.meter_phC_W);
      stream.next(m.mcb_V);
      stream.next(m.mcb_I);
      stream.next(m.mcb_sw_pos);
      stream.next(m.state_temphum);
      stream.next(m.state_meter);
      stream.next(m.state_mcb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ps_state_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::power_system::ps_state_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::power_system::ps_state_Type_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "th_temperature[]" << std::endl;
    for (size_t i = 0; i < v.th_temperature.size(); ++i)
    {
      s << indent << "  th_temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.th_temperature[i]);
    }
    s << indent << "th_humidity[]" << std::endl;
    for (size_t i = 0; i < v.th_humidity.size(); ++i)
    {
      s << indent << "  th_humidity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.th_humidity[i]);
    }
    s << indent << "meter_phA_V[]" << std::endl;
    for (size_t i = 0; i < v.meter_phA_V.size(); ++i)
    {
      s << indent << "  meter_phA_V[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phA_V[i]);
    }
    s << indent << "meter_phB_V[]" << std::endl;
    for (size_t i = 0; i < v.meter_phB_V.size(); ++i)
    {
      s << indent << "  meter_phB_V[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phB_V[i]);
    }
    s << indent << "meter_phC_V[]" << std::endl;
    for (size_t i = 0; i < v.meter_phC_V.size(); ++i)
    {
      s << indent << "  meter_phC_V[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phC_V[i]);
    }
    s << indent << "meter_phA_I[]" << std::endl;
    for (size_t i = 0; i < v.meter_phA_I.size(); ++i)
    {
      s << indent << "  meter_phA_I[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phA_I[i]);
    }
    s << indent << "meter_phB_I[]" << std::endl;
    for (size_t i = 0; i < v.meter_phB_I.size(); ++i)
    {
      s << indent << "  meter_phB_I[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phB_I[i]);
    }
    s << indent << "meter_phC_I[]" << std::endl;
    for (size_t i = 0; i < v.meter_phC_I.size(); ++i)
    {
      s << indent << "  meter_phC_I[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phC_I[i]);
    }
    s << indent << "meter_tot_W[]" << std::endl;
    for (size_t i = 0; i < v.meter_tot_W.size(); ++i)
    {
      s << indent << "  meter_tot_W[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_tot_W[i]);
    }
    s << indent << "meter_phA_W[]" << std::endl;
    for (size_t i = 0; i < v.meter_phA_W.size(); ++i)
    {
      s << indent << "  meter_phA_W[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phA_W[i]);
    }
    s << indent << "meter_phB_W[]" << std::endl;
    for (size_t i = 0; i < v.meter_phB_W.size(); ++i)
    {
      s << indent << "  meter_phB_W[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phB_W[i]);
    }
    s << indent << "meter_phC_W[]" << std::endl;
    for (size_t i = 0; i < v.meter_phC_W.size(); ++i)
    {
      s << indent << "  meter_phC_W[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meter_phC_W[i]);
    }
    s << indent << "mcb_V[]" << std::endl;
    for (size_t i = 0; i < v.mcb_V.size(); ++i)
    {
      s << indent << "  mcb_V[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mcb_V[i]);
    }
    s << indent << "mcb_I[]" << std::endl;
    for (size_t i = 0; i < v.mcb_I.size(); ++i)
    {
      s << indent << "  mcb_I[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mcb_I[i]);
    }
    s << indent << "mcb_sw_pos[]" << std::endl;
    for (size_t i = 0; i < v.mcb_sw_pos.size(); ++i)
    {
      s << indent << "  mcb_sw_pos[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.mcb_sw_pos[i]);
    }
    s << indent << "state_temphum[]" << std::endl;
    for (size_t i = 0; i < v.state_temphum.size(); ++i)
    {
      s << indent << "  state_temphum[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.state_temphum[i]);
    }
    s << indent << "state_meter[]" << std::endl;
    for (size_t i = 0; i < v.state_meter.size(); ++i)
    {
      s << indent << "  state_meter[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.state_meter[i]);
    }
    s << indent << "state_mcb[]" << std::endl;
    for (size_t i = 0; i < v.state_mcb.size(); ++i)
    {
      s << indent << "  state_mcb[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.state_mcb[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POWER_SYSTEM_MESSAGE_PS_STATE_TYPE_H
