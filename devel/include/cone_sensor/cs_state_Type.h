// Generated by gencpp from file cone_sensor/cs_state_Type.msg
// DO NOT EDIT!


#ifndef CONE_SENSOR_MESSAGE_CS_STATE_TYPE_H
#define CONE_SENSOR_MESSAGE_CS_STATE_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cone_sensor
{
template <class ContainerAllocator>
struct cs_state_Type_
{
  typedef cs_state_Type_<ContainerAllocator> Type;

  cs_state_Type_()
    : timestamp(0.0)
    , weight_slots()
    , state()  {
      weight_slots.assign(0.0);

      state.assign(0);
  }
  cs_state_Type_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , weight_slots()
    , state()  {
  (void)_alloc;
      weight_slots.assign(0.0);

      state.assign(0);
  }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<double, 14>  _weight_slots_type;
  _weight_slots_type weight_slots;

   typedef boost::array<int64_t, 14>  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::cone_sensor::cs_state_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cone_sensor::cs_state_Type_<ContainerAllocator> const> ConstPtr;

}; // struct cs_state_Type_

typedef ::cone_sensor::cs_state_Type_<std::allocator<void> > cs_state_Type;

typedef boost::shared_ptr< ::cone_sensor::cs_state_Type > cs_state_TypePtr;
typedef boost::shared_ptr< ::cone_sensor::cs_state_Type const> cs_state_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cone_sensor::cs_state_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cone_sensor::cs_state_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cone_sensor::cs_state_Type_<ContainerAllocator1> & lhs, const ::cone_sensor::cs_state_Type_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.weight_slots == rhs.weight_slots &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cone_sensor::cs_state_Type_<ContainerAllocator1> & lhs, const ::cone_sensor::cs_state_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cone_sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cone_sensor::cs_state_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cone_sensor::cs_state_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cone_sensor::cs_state_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed4de7dc8dadb6133b9f1ded06e00707";
  }

  static const char* value(const ::cone_sensor::cs_state_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed4de7dc8dadb613ULL;
  static const uint64_t static_value2 = 0x3b9f1ded06e00707ULL;
};

template<class ContainerAllocator>
struct DataType< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cone_sensor/cs_state_Type";
  }

  static const char* value(const ::cone_sensor::cs_state_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Timestamp [s]\n"
"float64 timestamp\n"
"\n"
"# 14 weight sensor readings in [kg]\n"
"float64[14] weight_slots\n"
"\n"
"# 14 sensor error state\n"
"int64[14] state\n"
"\n"
"\n"
;
  }

  static const char* value(const ::cone_sensor::cs_state_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.weight_slots);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cs_state_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cone_sensor::cs_state_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cone_sensor::cs_state_Type_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "weight_slots[]" << std::endl;
    for (size_t i = 0; i < v.weight_slots.size(); ++i)
    {
      s << indent << "  weight_slots[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.weight_slots[i]);
    }
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONE_SENSOR_MESSAGE_CS_STATE_TYPE_H
