// Generated by gencpp from file roadbot_control/ac_go_collect_ArgsRequest.msg
// DO NOT EDIT!


#ifndef ROADBOT_CONTROL_MESSAGE_AC_GO_COLLECT_ARGSREQUEST_H
#define ROADBOT_CONTROL_MESSAGE_AC_GO_COLLECT_ARGSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roadbot_control
{
template <class ContainerAllocator>
struct ac_go_collect_ArgsRequest_
{
  typedef ac_go_collect_ArgsRequest_<ContainerAllocator> Type;

  ac_go_collect_ArgsRequest_()
    : number_of_cones(0)
    , mode(0)  {
    }
  ac_go_collect_ArgsRequest_(const ContainerAllocator& _alloc)
    : number_of_cones(0)
    , mode(0)  {
  (void)_alloc;
    }



   typedef int64_t _number_of_cones_type;
  _number_of_cones_type number_of_cones;

   typedef int64_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ac_go_collect_ArgsRequest_

typedef ::roadbot_control::ac_go_collect_ArgsRequest_<std::allocator<void> > ac_go_collect_ArgsRequest;

typedef boost::shared_ptr< ::roadbot_control::ac_go_collect_ArgsRequest > ac_go_collect_ArgsRequestPtr;
typedef boost::shared_ptr< ::roadbot_control::ac_go_collect_ArgsRequest const> ac_go_collect_ArgsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator1> & lhs, const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.number_of_cones == rhs.number_of_cones &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator1> & lhs, const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roadbot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70673fa31e53dfa187c90f953409dc66";
  }

  static const char* value(const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70673fa31e53dfa1ULL;
  static const uint64_t static_value2 = 0x87c90f953409dc66ULL;
};

template<class ContainerAllocator>
struct DataType< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roadbot_control/ac_go_collect_ArgsRequest";
  }

  static const char* value(const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int64 number_of_cones\n"
"int64 mode\n"
"\n"
;
  }

  static const char* value(const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_of_cones);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ac_go_collect_ArgsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roadbot_control::ac_go_collect_ArgsRequest_<ContainerAllocator>& v)
  {
    s << indent << "number_of_cones: ";
    Printer<int64_t>::stream(s, indent + "  ", v.number_of_cones);
    s << indent << "mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROADBOT_CONTROL_MESSAGE_AC_GO_COLLECT_ARGSREQUEST_H
