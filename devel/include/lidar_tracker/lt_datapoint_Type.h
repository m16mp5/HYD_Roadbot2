// Generated by gencpp from file lidar_tracker/lt_datapoint_Type.msg
// DO NOT EDIT!


#ifndef LIDAR_TRACKER_MESSAGE_LT_DATAPOINT_TYPE_H
#define LIDAR_TRACKER_MESSAGE_LT_DATAPOINT_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_tracker
{
template <class ContainerAllocator>
struct lt_datapoint_Type_
{
  typedef lt_datapoint_Type_<ContainerAllocator> Type;

  lt_datapoint_Type_()
    : Dist(0.0)
    , Angle(0.0)
    , x(0.0)
    , y(0.0)
    , intensity(0.0)  {
    }
  lt_datapoint_Type_(const ContainerAllocator& _alloc)
    : Dist(0.0)
    , Angle(0.0)
    , x(0.0)
    , y(0.0)
    , intensity(0.0)  {
  (void)_alloc;
    }



   typedef double _Dist_type;
  _Dist_type Dist;

   typedef double _Angle_type;
  _Angle_type Angle;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _intensity_type;
  _intensity_type intensity;





  typedef boost::shared_ptr< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> const> ConstPtr;

}; // struct lt_datapoint_Type_

typedef ::lidar_tracker::lt_datapoint_Type_<std::allocator<void> > lt_datapoint_Type;

typedef boost::shared_ptr< ::lidar_tracker::lt_datapoint_Type > lt_datapoint_TypePtr;
typedef boost::shared_ptr< ::lidar_tracker::lt_datapoint_Type const> lt_datapoint_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator1> & lhs, const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator2> & rhs)
{
  return lhs.Dist == rhs.Dist &&
    lhs.Angle == rhs.Angle &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.intensity == rhs.intensity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator1> & lhs, const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "856cbb998fe9c851ccd38f03abcbca6e";
  }

  static const char* value(const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x856cbb998fe9c851ULL;
  static const uint64_t static_value2 = 0xccd38f03abcbca6eULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_tracker/lt_datapoint_Type";
  }

  static const char* value(const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# XY coordinate [m]\n"
"float64  Dist\n"
"float64  Angle\n"
"float64  x\n"
"float64  y\n"
"# RSSI [0~255]\n"
"float64  intensity\n"
"\n"
;
  }

  static const char* value(const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Dist);
      stream.next(m.Angle);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.intensity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lt_datapoint_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>& v)
  {
    s << indent << "Dist: ";
    Printer<double>::stream(s, indent + "  ", v.Dist);
    s << indent << "Angle: ";
    Printer<double>::stream(s, indent + "  ", v.Angle);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "intensity: ";
    Printer<double>::stream(s, indent + "  ", v.intensity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_TRACKER_MESSAGE_LT_DATAPOINT_TYPE_H
