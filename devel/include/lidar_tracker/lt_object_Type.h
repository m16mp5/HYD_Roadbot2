// Generated by gencpp from file lidar_tracker/lt_object_Type.msg
// DO NOT EDIT!


#ifndef LIDAR_TRACKER_MESSAGE_LT_OBJECT_TYPE_H
#define LIDAR_TRACKER_MESSAGE_LT_OBJECT_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lidar_tracker/lt_datapoint_Type.h>
#include <lidar_tracker/lt_datapoint_Type.h>
#include <lidar_tracker/lt_datapoint_Type.h>
#include <lidar_tracker/lt_datapoint_Type.h>
#include <lidar_tracker/lt_datapoint_Type.h>
#include <lidar_tracker/lt_datapoint_Type.h>
#include <lidar_tracker/lt_datapoint_Type.h>
#include <lidar_tracker/lt_datapoint_Type.h>

namespace lidar_tracker
{
template <class ContainerAllocator>
struct lt_object_Type_
{
  typedef lt_object_Type_<ContainerAllocator> Type;

  lt_object_Type_()
    : ID(0)
    , IDTimestamp(0.0)
    , UpdateInterval(0.0)
    , RatioM(0.0)
    , MinPoint()
    , IncEdge()
    , DecEdge()
    , CenterPoint()
    , StableRefPoint()
    , Size(0.0)
    , Is_Cone(false)
    , Is_Tracked(false)
    , Est_Vel()
    , Est_Acc()
    , Is_Fused(false)
    , Incline()
    , Rotate(0.0)  {
    }
  lt_object_Type_(const ContainerAllocator& _alloc)
    : ID(0)
    , IDTimestamp(0.0)
    , UpdateInterval(0.0)
    , RatioM(0.0)
    , MinPoint(_alloc)
    , IncEdge(_alloc)
    , DecEdge(_alloc)
    , CenterPoint(_alloc)
    , StableRefPoint(_alloc)
    , Size(0.0)
    , Is_Cone(false)
    , Is_Tracked(false)
    , Est_Vel(_alloc)
    , Est_Acc(_alloc)
    , Is_Fused(false)
    , Incline(_alloc)
    , Rotate(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _ID_type;
  _ID_type ID;

   typedef double _IDTimestamp_type;
  _IDTimestamp_type IDTimestamp;

   typedef double _UpdateInterval_type;
  _UpdateInterval_type UpdateInterval;

   typedef double _RatioM_type;
  _RatioM_type RatioM;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _MinPoint_type;
  _MinPoint_type MinPoint;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _IncEdge_type;
  _IncEdge_type IncEdge;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _DecEdge_type;
  _DecEdge_type DecEdge;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _CenterPoint_type;
  _CenterPoint_type CenterPoint;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _StableRefPoint_type;
  _StableRefPoint_type StableRefPoint;

   typedef double _Size_type;
  _Size_type Size;

   typedef uint8_t _Is_Cone_type;
  _Is_Cone_type Is_Cone;

   typedef uint8_t _Is_Tracked_type;
  _Is_Tracked_type Is_Tracked;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _Est_Vel_type;
  _Est_Vel_type Est_Vel;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _Est_Acc_type;
  _Est_Acc_type Est_Acc;

   typedef uint8_t _Is_Fused_type;
  _Is_Fused_type Is_Fused;

   typedef  ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator>  _Incline_type;
  _Incline_type Incline;

   typedef double _Rotate_type;
  _Rotate_type Rotate;





  typedef boost::shared_ptr< ::lidar_tracker::lt_object_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_tracker::lt_object_Type_<ContainerAllocator> const> ConstPtr;

}; // struct lt_object_Type_

typedef ::lidar_tracker::lt_object_Type_<std::allocator<void> > lt_object_Type;

typedef boost::shared_ptr< ::lidar_tracker::lt_object_Type > lt_object_TypePtr;
typedef boost::shared_ptr< ::lidar_tracker::lt_object_Type const> lt_object_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_tracker::lt_object_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_tracker::lt_object_Type_<ContainerAllocator1> & lhs, const ::lidar_tracker::lt_object_Type_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.IDTimestamp == rhs.IDTimestamp &&
    lhs.UpdateInterval == rhs.UpdateInterval &&
    lhs.RatioM == rhs.RatioM &&
    lhs.MinPoint == rhs.MinPoint &&
    lhs.IncEdge == rhs.IncEdge &&
    lhs.DecEdge == rhs.DecEdge &&
    lhs.CenterPoint == rhs.CenterPoint &&
    lhs.StableRefPoint == rhs.StableRefPoint &&
    lhs.Size == rhs.Size &&
    lhs.Is_Cone == rhs.Is_Cone &&
    lhs.Is_Tracked == rhs.Is_Tracked &&
    lhs.Est_Vel == rhs.Est_Vel &&
    lhs.Est_Acc == rhs.Est_Acc &&
    lhs.Is_Fused == rhs.Is_Fused &&
    lhs.Incline == rhs.Incline &&
    lhs.Rotate == rhs.Rotate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_tracker::lt_object_Type_<ContainerAllocator1> & lhs, const ::lidar_tracker::lt_object_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_tracker::lt_object_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_tracker::lt_object_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_tracker::lt_object_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "653a1245a4632ad939226826e9619f93";
  }

  static const char* value(const ::lidar_tracker::lt_object_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x653a1245a4632ad9ULL;
  static const uint64_t static_value2 = 0x39226826e9619f93ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_tracker/lt_object_Type";
  }

  static const char* value(const ::lidar_tracker::lt_object_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Object ID\n"
"int64 ID\n"
"float64 IDTimestamp\n"
"\n"
"# Interval [s]\n"
"float64 UpdateInterval\n"
"\n"
"# Matching ratio\n"
"float64 RatioM\n"
"\n"
"# Object feature points\n"
"lidar_tracker/lt_datapoint_Type MinPoint\n"
"lidar_tracker/lt_datapoint_Type IncEdge\n"
"lidar_tracker/lt_datapoint_Type DecEdge\n"
"lidar_tracker/lt_datapoint_Type CenterPoint\n"
"lidar_tracker/lt_datapoint_Type StableRefPoint\n"
"\n"
"# Object size [m]\n"
"float64 Size\n"
"\n"
"# Object is cone\n"
"bool Is_Cone\n"
"# Object is tracked\n"
"bool Is_Tracked\n"
"\n"
"# Estimated Vel Acc\n"
"lidar_tracker/lt_datapoint_Type Est_Vel\n"
"lidar_tracker/lt_datapoint_Type Est_Acc\n"
"\n"
"# Lidar data fused object\n"
"bool Is_Fused\n"
"\n"
"# Estimated incline angle [rad]\n"
"lidar_tracker/lt_datapoint_Type Incline\n"
"# Estimated rotated angle [rad]\n"
"float64 Rotate\n"
"\n"
"\n"
"================================================================================\n"
"MSG: lidar_tracker/lt_datapoint_Type\n"
"# XY coordinate [m]\n"
"float64  Dist\n"
"float64  Angle\n"
"float64  x\n"
"float64  y\n"
"# RSSI [0~255]\n"
"float64  intensity\n"
"\n"
;
  }

  static const char* value(const ::lidar_tracker::lt_object_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.IDTimestamp);
      stream.next(m.UpdateInterval);
      stream.next(m.RatioM);
      stream.next(m.MinPoint);
      stream.next(m.IncEdge);
      stream.next(m.DecEdge);
      stream.next(m.CenterPoint);
      stream.next(m.StableRefPoint);
      stream.next(m.Size);
      stream.next(m.Is_Cone);
      stream.next(m.Is_Tracked);
      stream.next(m.Est_Vel);
      stream.next(m.Est_Acc);
      stream.next(m.Is_Fused);
      stream.next(m.Incline);
      stream.next(m.Rotate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lt_object_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_tracker::lt_object_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_tracker::lt_object_Type_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ID);
    s << indent << "IDTimestamp: ";
    Printer<double>::stream(s, indent + "  ", v.IDTimestamp);
    s << indent << "UpdateInterval: ";
    Printer<double>::stream(s, indent + "  ", v.UpdateInterval);
    s << indent << "RatioM: ";
    Printer<double>::stream(s, indent + "  ", v.RatioM);
    s << indent << "MinPoint: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.MinPoint);
    s << indent << "IncEdge: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.IncEdge);
    s << indent << "DecEdge: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.DecEdge);
    s << indent << "CenterPoint: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.CenterPoint);
    s << indent << "StableRefPoint: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.StableRefPoint);
    s << indent << "Size: ";
    Printer<double>::stream(s, indent + "  ", v.Size);
    s << indent << "Is_Cone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Is_Cone);
    s << indent << "Is_Tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Is_Tracked);
    s << indent << "Est_Vel: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.Est_Vel);
    s << indent << "Est_Acc: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.Est_Acc);
    s << indent << "Is_Fused: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Is_Fused);
    s << indent << "Incline: ";
    s << std::endl;
    Printer< ::lidar_tracker::lt_datapoint_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.Incline);
    s << indent << "Rotate: ";
    Printer<double>::stream(s, indent + "  ", v.Rotate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_TRACKER_MESSAGE_LT_OBJECT_TYPE_H
