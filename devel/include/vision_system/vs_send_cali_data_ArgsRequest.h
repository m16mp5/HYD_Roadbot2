// Generated by gencpp from file vision_system/vs_send_cali_data_ArgsRequest.msg
// DO NOT EDIT!


#ifndef VISION_SYSTEM_MESSAGE_VS_SEND_CALI_DATA_ARGSREQUEST_H
#define VISION_SYSTEM_MESSAGE_VS_SEND_CALI_DATA_ARGSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_system
{
template <class ContainerAllocator>
struct vs_send_cali_data_ArgsRequest_
{
  typedef vs_send_cali_data_ArgsRequest_<ContainerAllocator> Type;

  vs_send_cali_data_ArgsRequest_()
    : caliD_0(0)
    , caliD_1(0)
    , caliD_2(0)
    , caliD_3(0)
    , caliD_4(0)
    , caliD_5(0)
    , caliD_6(0)
    , caliD_7(0)
    , Is_HD_check(false)  {
    }
  vs_send_cali_data_ArgsRequest_(const ContainerAllocator& _alloc)
    : caliD_0(0)
    , caliD_1(0)
    , caliD_2(0)
    , caliD_3(0)
    , caliD_4(0)
    , caliD_5(0)
    , caliD_6(0)
    , caliD_7(0)
    , Is_HD_check(false)  {
  (void)_alloc;
    }



   typedef int64_t _caliD_0_type;
  _caliD_0_type caliD_0;

   typedef int64_t _caliD_1_type;
  _caliD_1_type caliD_1;

   typedef int64_t _caliD_2_type;
  _caliD_2_type caliD_2;

   typedef int64_t _caliD_3_type;
  _caliD_3_type caliD_3;

   typedef int64_t _caliD_4_type;
  _caliD_4_type caliD_4;

   typedef int64_t _caliD_5_type;
  _caliD_5_type caliD_5;

   typedef int64_t _caliD_6_type;
  _caliD_6_type caliD_6;

   typedef int64_t _caliD_7_type;
  _caliD_7_type caliD_7;

   typedef uint8_t _Is_HD_check_type;
  _Is_HD_check_type Is_HD_check;





  typedef boost::shared_ptr< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct vs_send_cali_data_ArgsRequest_

typedef ::vision_system::vs_send_cali_data_ArgsRequest_<std::allocator<void> > vs_send_cali_data_ArgsRequest;

typedef boost::shared_ptr< ::vision_system::vs_send_cali_data_ArgsRequest > vs_send_cali_data_ArgsRequestPtr;
typedef boost::shared_ptr< ::vision_system::vs_send_cali_data_ArgsRequest const> vs_send_cali_data_ArgsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator1> & lhs, const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.caliD_0 == rhs.caliD_0 &&
    lhs.caliD_1 == rhs.caliD_1 &&
    lhs.caliD_2 == rhs.caliD_2 &&
    lhs.caliD_3 == rhs.caliD_3 &&
    lhs.caliD_4 == rhs.caliD_4 &&
    lhs.caliD_5 == rhs.caliD_5 &&
    lhs.caliD_6 == rhs.caliD_6 &&
    lhs.caliD_7 == rhs.caliD_7 &&
    lhs.Is_HD_check == rhs.Is_HD_check;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator1> & lhs, const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_system

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "270e49b9f757c4b2764adbe2f5b508e2";
  }

  static const char* value(const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x270e49b9f757c4b2ULL;
  static const uint64_t static_value2 = 0x764adbe2f5b508e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_system/vs_send_cali_data_ArgsRequest";
  }

  static const char* value(const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int64 caliD_0\n"
"int64 caliD_1\n"
"int64 caliD_2\n"
"int64 caliD_3\n"
"int64 caliD_4\n"
"int64 caliD_5\n"
"int64 caliD_6\n"
"int64 caliD_7\n"
"bool Is_HD_check\n"
"\n"
;
  }

  static const char* value(const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.caliD_0);
      stream.next(m.caliD_1);
      stream.next(m.caliD_2);
      stream.next(m.caliD_3);
      stream.next(m.caliD_4);
      stream.next(m.caliD_5);
      stream.next(m.caliD_6);
      stream.next(m.caliD_7);
      stream.next(m.Is_HD_check);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vs_send_cali_data_ArgsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_system::vs_send_cali_data_ArgsRequest_<ContainerAllocator>& v)
  {
    s << indent << "caliD_0: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_0);
    s << indent << "caliD_1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_1);
    s << indent << "caliD_2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_2);
    s << indent << "caliD_3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_3);
    s << indent << "caliD_4: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_4);
    s << indent << "caliD_5: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_5);
    s << indent << "caliD_6: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_6);
    s << indent << "caliD_7: ";
    Printer<int64_t>::stream(s, indent + "  ", v.caliD_7);
    s << indent << "Is_HD_check: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Is_HD_check);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_SYSTEM_MESSAGE_VS_SEND_CALI_DATA_ARGSREQUEST_H
